name: R-CI (RSPM)

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    runs-on: ubuntu-22.04
    env:
      R_LIBS_USER: ${{ github.workspace }}/R/library

    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0

    - name: Set up R
      uses: r-lib/actions/setup-r@v2
      with:
        use-public-rspm: true

    - name: Install system dependencies
      run: |
        set -e
        sudo apt update
        sudo apt install -y libcurl4-openssl-dev libssl-dev libxml2-dev libharfbuzz-dev libfribidi-dev openjdk-11-jdk pandoc
      shell: bash

    - name: Check pandoc version
      run: pandoc --version

    - name: Configure Java for R
      run: |
        set -e
        sudo R CMD javareconf
      shell: bash

    - name: Set R_LIBS_USER environment variable
      run: echo "R_LIBS_USER=${{ github.workspace }}/R/library" >> $GITHUB_ENV

    - name: Create R library directory
      run: |
        mkdir -p ${{ env.R_LIBS_USER }}
      shell: bash

    - name: Debug - Print R_LIBS_USER and .libPaths() BEFORE install
      run: |
        Rscript -e 'cat("R_LIBS_USER env var:", Sys.getenv("R_LIBS_USER"), "\n")'
        Rscript -e '.libPaths()'

    - name: Install dependencies
      run: |
        set -e
        R -e 'install.packages(c("lintr", "styler", "testthat", "remotes", "optparse", "rprojroot", "pkgdown"), lib = Sys.getenv("R_LIBS_USER"))'
        R -e 'install.packages("DT", lib = Sys.getenv("R_LIBS_USER"))'
        R -e 'remotes::install_deps(dependencies = TRUE, Ncpus = parallel::detectCores(), lib = Sys.getenv("R_LIBS_USER"))'
      working-directory: ${{ github.workspace }}
      shell: bash

    - name: Debug - Print R_LIBS_USER and .libPaths() AFTER install
      run: |
        Rscript -e 'cat("R_LIBS_USER env var:", Sys.getenv("R_LIBS_USER"), "\n")'
        Rscript -e '.libPaths()'
        Rscript -e 'if("rprojroot" %in% installed.packages()) cat("rprojroot IS installed\n") else cat("rprojroot IS NOT installed\n")'


    - name: Cache R packages
      uses: actions/cache@v3
      with:
        path: ${{ env.R_LIBS_USER }}
        key: ${{ runner.os }}-r-${{ hashFiles('**/DESCRIPTION') }}
        restore-keys: |
          ${{ runner.os }}-r-
          ${{ runner.os }}-r-

    - name: Fix .lintr Encoding (if needed)
      run: |
        echo "Ensuring .lintr is UTF-8 encoded"
        iconv -f $(file -b --mime-encoding .lintr) -t UTF-8 .lintr > .lintr.tmp
        mv .lintr.tmp .lintr
      shell: bash

    - name: Debug - Print Project Root
      run: |
        R -e 'library(rprojroot); print(find_root(has_file(".Rprofile")))'
      working-directory: ${{ github.workspace }}

    - name: Lint code
      run: |
        set -e
        R -e 'lintr::lint_package()'
      shell: bash

    - name: Run tests
      run: |
        set -e
        R -e 'testthat::test_dir("tests/testthat", reporter = "progress")'
      shell: bash

    - name: Style code
      run: |
        set -e
        R -e 'styler::style_pkg()'
      shell: bash

    - name: Build package documentation
      run: |
        set -e
        R -e 'pkgdown::build_site()'
      shell: bash