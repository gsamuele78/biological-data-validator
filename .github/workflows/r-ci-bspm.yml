name: R-CI (BSPM)

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    runs-on: ubuntu-22.04

    env:
      R_LIBS_USER: ${{ github.workspace }}/.Rlibs # Explicitly set R_LIBS_USER upfront

    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0

    - name: Set up R
      uses: r-lib/actions/setup-r@v2
      with:
        use-public-rspm: false
        r-version: '4.4.3'  # adjust as needed

    - name: Install system dependencies
      run: |
        sudo apt update
        sudo apt install -y libcurl4-openssl-dev libssl-dev libxml2-dev libharfbuzz-dev libfribidi-dev openjdk-11-jdk pandoc texlive-latex-base texlive-extra-utils

    - name: Configure Java for R
      run: sudo R CMD javareconf

    - name: Configure apt repositories for r2u and CRAN
      run: |
        # Add r2u repository for CRAN as Ubuntu binaries
        echo "deb [arch=amd64] https://r2u.stat.illinois.edu/ubuntu jammy main" | sudo tee /etc/apt/sources.list.d/cranapt.list
        # Add CRAN repository (optional, for up-to-date R binaries)
        echo "deb [arch=amd64] https://cloud.r-project.org/bin/linux/ubuntu jammy-cran40/" | sudo tee /etc/apt/sources.list.d/cran_r.list
        # Import GPG keys for both repositories
        sudo wget -q -O /etc/apt/trusted.gpg.d/cranapt_key.asc https://eddelbuettel.github.io/r2u/assets/dirk_eddelbuettel_key.asc
        sudo wget -q -O /etc/apt/trusted.gpg.d/cran_ubuntu_key.asc https://cloud.r-project.org/bin/linux/ubuntu/marutter_pubkey.asc
        sudo apt-get update

    - name: Install bspm and configure for container use
      run: |
        # Install bspm as a system package (to avoid user library issues)
        sudo Rscript --vanilla -e 'install.packages("bspm", repos="https://cran.r-project.org")'
        # In container environments, set bspm.sudo=TRUE to bypass D-Bus
        echo "options(bspm.sudo = TRUE)" >> ~/.Rprofile
        # Enable bspm (this will now use sudo because of the option above)
        sudo Rscript --vanilla -e 'suppressMessages(bspm::enable())'

    - name: Update apt and install dependencies with retry (system deps for bspm)
      run: |
        # Retry apt-get update up to 5 times with a 10 second delay
        for i in {1..5}; do
          sudo apt-get update && break || sleep 10;
        done
        # Install required packages (including bspm prerequisites)
        sudo apt-get install -y r-base-core python3-dbus python3-gi python3-apt

    - name: Install remotes separately # Ensure remotes is installed before dependency installation
      run: |
        R -e 'bspm::disable(); install.packages("remotes", repos = "https://cran.r-project.org", verbose = TRUE)'
      working-directory: ${{ github.workspace }}

    - name: Create required directories and files
      run: |
        mkdir -p R/
        mkdir -p tests/testthat
        mkdir -p inst/extdata
        
        # Create necessary R source files
        touch R/csv_mapping.R
        touch R/data_classes.R
        touch R/db_interaction.R
        touch R/validation_classes.R
        touch R/utils.R
        
        # Create test data files
        touch inst/extdata/sample_data_valid.xlsx
        touch inst/extdata/sample_data_no_valid.xlsx
        touch inst/extdata/test.csv

    - name: Install additional dependencies
      run: |
        # Ensure packages are installed with explicit error handling
        Rscript -e '
          # Define required packages
          required_packages <- c(
            "here",
            "logger",
            "rmarkdown",
            "DBI",
            "RSQLite",
            "lubridate",
            "R6",
            "readr",
            "testthat",
            "rprojroot",
            "shiny",
            "openxlsx"
          )
          
          # Install packages with error handling
          for (pkg in required_packages) {
            if (!requireNamespace(pkg, quietly = TRUE)) {
              message(paste("Installing package:", pkg))
              install.packages(pkg, repos = "https://cran.r-project.org")
            } else {
              message(paste("Package already installed:", pkg))
            }
          }
          
          # Verify all packages can be loaded
          for (pkg in required_packages) {
            message(paste("Verifying package can be loaded:", pkg))
            library(pkg, character.only = TRUE)
          }
        '

    - name: Install R package dependencies # Using r-lib action to install dependencies
      uses: r-lib/actions/setup-r-dependencies@v2
      with:
        extra-packages: any::rcmdcheck # Install rcmdcheck as well, if you use it

    - name: Run R CMD check
      run: R CMD check --no-manual --no-vignettes . # Disable manual and vignettes for faster checks remove after core building

    - name: Cache R packages # keep cache step, it is useful, but disabled temporarily for debugging
      if: true
      uses: actions/cache@v3
      with:
        path: |
          ${{ env.R_LIBS_USER }}
          !${{ env.R_LIBS_USER }}/testing
        key: ${{ runner.os }}-r-${{ hashFiles('**/DESCRIPTION', 'renv.lock')}}
        restore-keys: |
          ${{ runner.os }}-r-
          ${{ runner.os }}-r-

    - name: Fix .lintr Encoding (if needed) # keep lintr step, if needed
      if: false
      run: |
        echo "Ensuring .lintr is UTF-8 encoded"
        iconv -f $(file -b --mime-encoding .lintr) -t UTF-8 .lintr > .lintr.tmp
        mv .lintr.tmp .lintr
      shell: bash

    - name: Debug - Print Project Root # keep debug step if needed
      if: false
      run: |
        R -e 'library(rprojroot); print(find_root(has_file(".Rprofile")))'
      working-directory: ${{ github.workspace }}

    - name: Lint code # keep lint code step
      run: |
        set -e
        R -e 'lintr::lint_package()'
      shell: bash

    - name: Run tests
      run: |
        set -e
        R -e '
          # Ensure required packages are installed and loaded
          required_packages <- c(
            "renv", "here", "testthat", "logger", "shiny", 
            "openxlsx", "shinytest", "readxl", "DBI", 
            "lubridate", "readr"
          )
          
          for (pkg in required_packages) {
            if (!requireNamespace(pkg, quietly = TRUE)) {
              install.packages(pkg, repos = "https://cran.r-project.org")
            }
          }
          
          # Load required libraries
          lapply(required_packages, library, character.only = TRUE)
          
          # Run tests from the project root
          setwd(getwd())
          testthat::test_dir("tests/testthat", reporter = "progress")
        '
      shell: bash
      env:
        R_LIBS_USER: ${{ github.workspace }}/.Rlibs

    - name: Style code # keep style code step
      if: false
      run: |
        set -e
        R -e 'styler::style_pkg()'
      shell: bash

    - name: Build package documentation # keep build doc step
      if: false
      run: |
        set -e
        R -e 'pkgdown::build_site()'
      shell: bash